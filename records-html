<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÏÑ±ÎπàÏù¥ Í∏∞Î°ù ÏãúÏä§ÌÖú</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.4.4/css/tabulator.min.css">
    <style>
        body {
            font-family: 'Apple SD Gothic Neo', 'Malgun Gothic', sans-serif;
            padding: 0;
            margin: 0;
            background-color: #f7f9fc;
            color: #2d3748;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        header {
            background-color: white;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            padding: 15px 0;
            margin-bottom: 30px;
        }
        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }
        h1 {
            color: #2d3748;
            margin: 0;
            font-size: 24px;
            display: flex;
            align-items: center;
        }
        h1 .logo {
            margin-right: 10px;
            font-size: 28px;
        }
        .logout-btn {
            background-color: #e53e3e;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .logout-btn:hover {
            background-color: #c53030;
        }
        .info-panel {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        .info-panel h2 {
            margin-top: 0;
            color: #2d3748;
            font-size: 20px;
            border-bottom: 1px solid #e2e8f0;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }
        .info-item {
            margin-bottom: 8px;
        }
        .last-updated {
            font-style: italic;
            color: #718096;
            font-size: 14px;
        }
        .table-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            margin-bottom: 30px;
        }
        .table-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .table-header h2 {
            margin: 0;
            font-size: 20px;
        }
        .search-bar {
            display: flex;
            gap: 10px;
            width: 350px;
        }
        .search-bar input {
            flex-grow: 1;
            padding: 8px 12px;
            border: 1px solid #e2e8f0;
            border-radius: 5px;
            font-size: 14px;
        }
        .search-bar input:focus {
            outline: none;
            border-color: #4299e1;
        }
        .tabulator {
            margin-top: 15px;
            font-size: 14px;
        }
        .tabulator-col-title {
            font-weight: 600;
        }
        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        }
        .stat-value {
            font-size: 28px;
            font-weight: 700;
            color: #3182ce;
            margin: 10px 0;
        }
        .stat-label {
            color: #718096;
            font-size: 14px;
        }
        .export-button {
            background-color: #48bb78;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }
        .export-button:hover {
            background-color: #38a169;
        }
        .tab-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .tab-button {
            padding: 10px 20px;
            background-color: #e2e8f0;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: background-color 0.3s;
        }
        .tab-button.active {
            background-color: #4299e1;
            color: white;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .chart-container {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            margin-bottom: 30px;
            height: 350px;
        }
        @media (max-width: 768px) {
            .stats-container {
                grid-template-columns: 1fr;
            }
            .search-bar {
                width: 100%;
            }
            .table-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
        }
        .no-data-message {
            text-align: center;
            padding: 40px;
            color: #718096;
            font-style: italic;
        }
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100px;
        }
        .loading:after {
            content: " ";
            display: block;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 6px solid #4299e1;
            border-color: #4299e1 transparent #4299e1 transparent;
            animation: loading 1.2s linear infinite;
        }
        @keyframes loading {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <h1><span class="logo">üìä</span> ÏÑ±ÎπàÏù¥ Í∏∞Î°ù ÏãúÏä§ÌÖú</h1>
            <button class="logout-btn" onclick="logout()">Î°úÍ∑∏ÏïÑÏõÉ</button>
        </div>
    </header>
    
    <div class="container">
        <div class="info-panel">
            <h2>ÌååÏùº Ï†ïÎ≥¥</h2>
            <div class="info-item">ÌååÏùºÎ™Ö: <strong>ÏÑ±ÎπàÏù¥ Í∏∞Î°ù.xlsx</strong></div>
            <div class="info-item last-updated">ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: <span id="update-date">Î°úÎî© Ï§ë...</span></div>
        </div>
        
        <div class="tab-buttons">
            <button class="tab-button active" onclick="showTab('overview')">Í∞úÏöî</button>
            <button class="tab-button" onclick="showTab('data')">Îç∞Ïù¥ÌÑ∞</button>
        </div>
        
        <div id="overview-tab" class="tab-content active">
            <div class="stats-container">
                <div class="stat-card">
                    <div class="stat-label">Ï¥ù Í∏∞Î°ù Ïàò</div>
                    <div class="stat-value" id="total-records">-</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">ÏµúÍ∑º Í∏∞Î°ù ÎÇ†Ïßú</div>
                    <div class="stat-value" id="latest-date">-</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Í∏∞Î°ù Ìï≠Î™© Ïàò</div>
                    <div class="stat-value" id="column-count">-</div>
                </div>
            </div>
            
            <div class="chart-container" id="chart">
                <div class="loading"></div>
            </div>
        </div>
        
        <div id="data-tab" class="tab-content">
            <div class="table-container">
                <div class="table-header">
                    <h2>Îç∞Ïù¥ÌÑ∞ ÌÖåÏù¥Î∏î</h2>
                    <div class="search-bar">
                        <input type="text" id="search-input" placeholder="Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî...">
                        <button class="export-button" onclick="exportData()">ÎÇ¥Î≥¥ÎÇ¥Í∏∞</button>
                    </div>
                </div>
                <div id="data-table"></div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.4.4/js/tabulator.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script>
        // Ïù∏Ï¶ù ÌôïÏù∏
        function checkAuth() {
            const authenticated = localStorage.getItem("authenticated") === "true";
            const authTime = parseInt(localStorage.getItem("auth_time") || "0");
            const currentTime = new Date().getTime();
            
            // Ïù∏Ï¶ù ÏãúÍ∞ÑÏù¥ 1ÏãúÍ∞ÑÏùÑ Ï¥àÍ≥ºÌñàÎäîÏßÄ ÌôïÏù∏
            const oneHour = 60 * 60 * 1000; // 1ÏãúÍ∞Ñ (Î∞ÄÎ¶¨Ï¥à)
            const isAuthExpired = currentTime - authTime > oneHour;
            
            if (!authenticated || isAuthExpired) {
                localStorage.removeItem("authenticated");
                localStorage.removeItem("auth_time");
                window.location.href = "index.html";
                return false;
            }
            return true;
        }
        
        // Î°úÍ∑∏ÏïÑÏõÉ Ìï®Ïàò
        function logout() {
            localStorage.removeItem("authenticated");
            localStorage.removeItem("auth_time");
            window.location.href = "index.html";
        }
        
        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ïù∏Ï¶ù ÌôïÏù∏
        if (!checkAuth()) {
            // Ïù∏Ï¶ù Ïã§Ìå® Ïãú Ï≤òÎ¶¨Îäî checkAuth Ìï®Ïàò ÎÇ¥ÏóêÏÑú Ï≤òÎ¶¨Îê®
        }
        
        // ÌÉ≠ Î≥ÄÍ≤Ω Ìï®Ïàò
        function showTab(tabId) {
            // Î™®Îì† ÌÉ≠ Ïª®ÌÖêÏ∏† Ïà®Í∏∞Í∏∞
            document.querySelectorAll('.tab-content').forEach(content => {
                content.classList.remove('active');
            });
            
            // Î™®Îì† ÌÉ≠ Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // ÏÑ†ÌÉùÌïú ÌÉ≠ Î≥¥Ïù¥Í∏∞
            document.getElementById(tabId + '-tab').classList.add('active');
            
            // ÏÑ†ÌÉùÌïú ÌÉ≠ Î≤ÑÌäº ÌôúÏÑ±Ìôî
            document.querySelector(`.tab-button[onclick="showTab('${tabId}')"]`).classList.add('active');
        }
        
        // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        let table;
        let excelData = [];
        let chart;
        
        function loadData() {
            // ÌååÏùº ÏóÖÎ°úÎìú ÎåÄÏã† Îç∞Î™® Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
            const today = new Date();
            
            // ÌòÑÏû¨ ÌååÏùº ÏóÖÎ°úÎìú ÏãúÍ∞Ñ ÌëúÏãú
            document.getElementById('update-date').textContent = today.toLocaleString();
            
            // ÌååÏùº ÏßÅÏ†ë Î°úÎìúÎ•º ÏãúÎèÑ (Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî Ïù¥ ÏΩîÎìúÎ•º ÏÇ¨Ïö©, ÌòÑÏû¨Îäî Îç∞Î™® Îç∞Ïù¥ÌÑ∞)
            try {
                fetch('ÏÑ±ÎπàÏù¥_Í∏∞Î°ù.xlsx')
                    .then(response => {
                        if (!response.ok) throw new Error('ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
                        return response.arrayBuffer();
                    })
                    .then(buffer => {
                        processExcelFile(buffer);
                    })
                    .catch(error => {
                        console.warn("ÌååÏùº Î°úÎìú Ïã§Ìå®, Îç∞Î™® Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§:", error);
                        createDemoData();
                    });
            } catch (error) {
                console.warn("ÌååÏùº Î°úÎìú ÏãúÎèÑ Ïã§Ìå®, Îç∞Î™® Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§:", error);
                createDemoData();
            }
        }
        
        function processExcelFile(buffer) {
            try {
                const workbook = XLSX.read(buffer, {
                    type: 'arraybuffer',
                    cellDates: true
                });
                
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                
                // Îç∞Ïù¥ÌÑ∞Î•º JSONÏúºÎ°ú Î≥ÄÌôò
                excelData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                
                // Ï≤´ Î≤àÏß∏ ÌñâÏù¥ Ìó§ÎçîÏù∏ Í≤ΩÏö∞
                const headers = excelData[0];
                const dataRows = excelData.slice(1);
                
                // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
                updateStats(headers, dataRows);
                
                // Îç∞Ïù¥ÌÑ∞ ÌÖåÏù¥Î∏î Ï¥àÍ∏∞Ìôî
                initTable(headers, dataRows);
                
                // Ï∞®Ìä∏ Ï¥àÍ∏∞Ìôî
                initChart(headers, dataRows);
            } catch (error) {
                console.error("ÏóëÏÖÄ ÌååÏùº Ï≤òÎ¶¨ Ïò§Î•ò:", error);
                createDemoData();
            }
        }
        
        function createDemoData() {
            // Îç∞Î™® Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (ÏÑ±ÎπàÏù¥Ïùò Í∏∞Î°ùÏù¥Îùº Í∞ÄÏ†ï)
            const headers = ["ÎÇ†Ïßú", "ÏàòÌïô Ï†êÏàò", "Í≥ºÌïô Ï†êÏàò", "Íµ≠Ïñ¥ Ï†êÏàò", "Ïö¥ÎèôÏãúÍ∞Ñ(Î∂Ñ)", "ÎèÖÏÑúÎüâ(ÌéòÏù¥ÏßÄ)", "Î©îÎ™®"];
            
            const dataRows = [];
            const today = new Date();
            
            // ÏµúÍ∑º 30Ïùº Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±
            for (let i = 30; i >= 0; i--) {
                const date = new Date(today);
                date.setDate(today.getDate() - i);
                
                dataRows.push([
                    date.toISOString().split('T')[0], // ÎÇ†Ïßú
                    Math.floor(Math.random() * 30) + 70, // ÏàòÌïô Ï†êÏàò (70-100)
                    Math.floor(Math.random() * 30) + 70, // Í≥ºÌïô Ï†êÏàò (70-100)
                    Math.floor(Math.random() * 30) + 70, // Íµ≠Ïñ¥ Ï†êÏàò (70-100)
                    Math.floor(Math.random() * 60) + 30, // Ïö¥ÎèôÏãúÍ∞Ñ (30-90Î∂Ñ)
                    Math.floor(Math.random() * 50) + 10, // ÎèÖÏÑúÎüâ (10-60ÌéòÏù¥ÏßÄ)
                    ["Ïó¥Ïã¨Ìûà ÌñàÏñ¥Ïöî", "Ï°∞Í∏à Ïñ¥Î†§Ïõ†Ïñ¥Ïöî", "Ïûò ÌñàÏñ¥Ïöî", "ÎÖ∏Î†•ÌñàÏñ¥Ïöî"][Math.floor(Math.random() * 4)] // Î©îÎ™®
                ]);
            }
            
            // ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
            updateStats(headers, dataRows);
            
            // Îç∞Ïù¥ÌÑ∞ ÌÖåÏù¥Î∏î Ï¥àÍ∏∞Ìôî
            initTable(headers, dataRows);
            
            // Ï∞®Ìä∏ Ï¥àÍ∏∞Ìôî
            initChart(headers, dataRows);
            
            // Ï†ÑÏó≠ Î≥ÄÏàòÏóê Ï†ÄÏû•
            excelData = [headers, ...dataRows];
        }
        
        function updateStats(headers, dataRows) {
            document.getElementById('total-records').textContent = dataRows.length;
            document.getElementById('column-count').textContent = headers.length;
            
            if (dataRows.length > 0) {
                // ÎßàÏßÄÎßâ Îç∞Ïù¥ÌÑ∞Ïùò ÎÇ†Ïßú (Ï≤´ Î≤àÏß∏ Ïó¥Ïù¥ ÎÇ†ÏßúÎùºÍ≥† Í∞ÄÏ†ï)
                let latestDate = dataRows[dataRows.length - 1][0];
                
                // Date Í∞ùÏ≤¥Ïù∏ Í≤ΩÏö∞ Ìè¨Îß∑ÌåÖ
                if (latestDate instanceof Date) {
                    latestDate = latestDate.toISOString().split('T')[0];
                }
                
                document.getElementById('latest-date').textContent = latestDate;
            } else {
                document.getElementById('latest-date').textContent = "Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå";
            }
        }
        
        function initTable(headers, dataRows) {
            // Îç∞Ïù¥ÌÑ∞Î•º ÌÖåÏù¥Î∏îÎü¨ Ìè¨Îß∑ÏúºÎ°ú Î≥ÄÌôò
            const tableData = dataRows.map(row => {
                const rowObj = {};
                headers.forEach((header, index) => {
                    rowObj[header] = row[index];
                });
                return rowObj;
            });
            
            // Ïª¨Îüº Ï†ïÏùò ÏÉùÏÑ±
            const tableColumns = headers.map(header => {
                return {
                    title: header,
                    field: header,
                    headerFilter: true
                };
            });
            
            // ÌÖåÏù¥Î∏î ÏÉùÏÑ±
            table = new Tabulator("#data-table", {
                data: tableData,
                columns: tableColumns,
                layout: "fitColumns",
                pagination: "local",
                paginationSize: 10,
                paginationSizeSelector: [5, 10, 20, 50],
                movableColumns: true,
                responsiveLayout: "collapse",
                placeholder: "Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§."
            });
            
            // Í≤ÄÏÉâ Í∏∞Îä• Ïó∞Í≤∞
            document.getElementById("search-input").addEventListener("keyup", function() {
                table.setFilter(matchAny, {value: this.value});
            });
        }
        
        function initChart(headers, dataRows) {
            // Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Ï∞®Ìä∏ Ïª®ÌÖåÏù¥ÎÑàÏóê Î©îÏãúÏßÄ ÌëúÏãú
            if (dataRows.length === 0) {
                document.getElementById('chart').innerHTML = '<div class="no-data-message">Ï∞®Ìä∏Î•º ÌëúÏãúÌï† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.</div>';
                return;
            }
            
            // Ï∞®Ìä∏ Ïª®ÌÖåÏù¥ÎÑà Ï¥àÍ∏∞Ìôî
            document.getElementById('chart').innerHTML = '<canvas id="chart-canvas"></canvas>';
            const chartCanvas = document.getElementById('chart-canvas');
            const ctx = chartCanvas.getContext('2d');
            
            // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏàòÌïô, Í≥ºÌïô, Íµ≠Ïñ¥ Ï†êÏàòÎ•º Ï∞®Ìä∏Î°ú ÌëúÏãú (Ìó§ÎçîÏóê ÏûàÎã§Î©¥)
            const scoreHeaders = headers.filter(header => 
                header.includes('Ï†êÏàò') || 
                header.includes('ÏàòÌïô') || 
                header.includes('Í≥ºÌïô') || 
                header.includes('Íµ≠Ïñ¥')
            );
            
            // ÎÇ†Ïßú Ïª¨Îüº Ï∞æÍ∏∞ (Ï≤´ Î≤àÏß∏ Ïª¨ÎüºÏù¥ ÎÇ†ÏßúÎùºÍ≥† Í∞ÄÏ†ï)
            const dateIndex = 0;
            
            // Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
            const labels = dataRows.map(row => {
                const date = row[dateIndex];
                return date instanceof Date ? date.toISOString().split('T')[0] : date;
            });
            
            const datasets = scoreHeaders.map((header, index) => {
                const headerIndex = headers.indexOf(header);
                return {
                    label: header,
                    data: dataRows.map(row => row[headerIndex]),
                    borderColor: getColor(index),
                    backgroundColor: getColor(index, 0.2),
                    tension: 0.1
                };
            });
            
            // Ï∞®Ìä∏ ÏÉùÏÑ±
            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: datasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'ÏÑ±ÎπàÏù¥ Ï†êÏàò Ï∂îÏù¥'
                        },
                        legend: {
                            position: 'top',
                        }
                    },
                    scales: {
                        y: {
                            min: 0,
                            max: 100,
                            ticks: {
                                stepSize: 10
                            }
                        }
                    }
                }
            });
        }
        
        // Ïª¨Îü¨ Î∞∞Ïó¥ ÏÉùÏÑ± Ìï®Ïàò
        function getColor(index, alpha = 1) {
            const colors = [
                `rgba(75, 192, 192, ${alpha})`,
                `rgba(54, 162, 235, ${alpha})`,
                `rgba(153, 102, 255, ${alpha})`,
                `rgba(255, 159, 64, ${alpha})`,
                `rgba(255, 99, 132, ${alpha})`,
                `rgba(255, 206, 86, ${alpha})`
            ];
            return colors[index % colors.length];
        }
        
        // Îç∞Ïù¥ÌÑ∞ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Ìï®Ïàò
        function exportData() {
            if (!excelData || excelData.length === 0) {
                alert("ÎÇ¥Î≥¥ÎÇº Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.");
                return;
            }
            
            // CSV ÌååÏùºÎ°ú ÎÇ¥Î≥¥ÎÇ¥Í∏∞
            const csv = Papa.unparse(excelData);
            const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            
            // Îã§Ïö¥Î°úÎìú ÎßÅÌÅ¨ ÏÉùÏÑ± Î∞è ÌÅ¥Î¶≠
            const link = document.createElement('a');
            link.href = url;
            link.setAttribute('download', 'ÏÑ±ÎπàÏù¥_Í∏∞Î°ù.csv');
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
        
        // Í≤ÄÏÉâ ÌïÑÌÑ∞ Ìï®Ïàò - Î™®Îì† Ïª¨ÎüºÏóêÏÑú Í≤ÄÏÉâ
        function matchAny(data, filterParams) {
            const value = filterParams.value.toLowerCase();
            
            // Í∞íÏù¥ ÎπÑÏñ¥ÏûàÏúºÎ©¥ Î™®Îì† Ìñâ ÌëúÏãú
            if (!value) return true;
            
            // Î™®Îì† ÌïÑÎìúÏóêÏÑú Í≤ÄÏÉâÏñ¥ ÌôïÏù∏
            for (let key in data) {
                if (data[key] && data[key].toString().toLowerCase().includes(value)) {
                    return true;
                }
            }
            return false;
        }
        
        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        window.onload = function() {
            loadData();
            
            // Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú Ïù∏Ï¶ù ÌôïÏù∏ (5Î∂ÑÎßàÎã§)
            setInterval(checkAuth, 5 * 60 * 1000);
        };
    </script>
</body>
</html>
